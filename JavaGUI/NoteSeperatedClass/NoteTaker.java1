package JavaLearning.NoteSeperatedClass;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import java.time.LocalDateTime;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import java.io.FileWriter;

public class NoteTaker extends JFrame {
    private JPanel panel;
    private JButton saveButton;
    private JComboBox<Note> notesComboBox;
    private JTextArea textArea;
    private ArrayList<Note> notesList;
    private NoteSaver.NoteLoader noteLoader;
    private NoteSaver noteSaver;
    private String directoryPath = "C:/Notes";

    public NoteTaker() {
        super("Note Taker");
        notesList = new ArrayList<Note>();
        noteLoader = new NoteSaver.NoteLoader(directoryPath);
        noteSaver = new NoteSaver(directoryPath);
        createGUI();
        noteLoader.loadNotes();
    }

    private void createGUI() {
        // Initialize panel, text area, and button
        panel = new JPanel();
        textArea = new JTextArea();
        textArea.setFont(new Font("Arial", Font.PLAIN, 16));
        JScrollPane scrollPane = new JScrollPane(textArea);

        saveButton = new JButton("Save Note");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                saveNote();
            }
        });

        // Initialize notes combo box
        notesComboBox = new JComboBox<Note>();
        notesComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedIndex = notesComboBox.getSelectedIndex();
                if (selectedIndex >= 0) {
                    loadNoteIntoTextArea(notesList.get(selectedIndex));
                }
            }
        });

        // Initialize close button
        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });

        // Add components to panel
        panel.add(saveButton);
        panel.add(notesComboBox);
        panel.add(closeButton);

        // Add components to frame
        getContentPane().add(scrollPane, BorderLayout.CENTER);
        getContentPane().add(panel, BorderLayout.SOUTH);

        // Set window dimensions and make visible
        setPreferredSize(new Dimension(600, 400));
        pack();
        setVisible(true);
    }

    private void saveNote() {
        // Get filename from user
        String fileName = JOptionPane.showInputDialog("Enter file name:");

        // Get note text from text area
        String noteText = textArea.getText();

        // Create Note object and add it to notesList
        Note note = new Note(noteText, noteText);
        note.setFileName(fileName);
        note.setNoteText(noteText);
        notesList.add(note);

        // Save note to file
        noteSaver.saveNoteToFile(note);

        // Update notesComboBox
        notesComboBox.addItem(note);
        notesComboBox.setSelectedItem(note);
    }

    private void loadNoteIntoTextArea(Note note) {
        textArea.setText(note.getNoteText());
    }

    public static void main(String[] args) {
        new NoteTaker();
    }
}

class Note {
    private String title;
    private String content;
    private LocalDateTime creationTime;
    private LocalDateTime modificationTime;

    public Note(String noteText, String noteText2) {
        this.title = noteText;
        this.content = noteText2;
        this.creationTime = LocalDateTime.now();
        this.modificationTime = LocalDateTime.now();
    }

    public void setNoteText(String noteText) {
    }

    public String getNoteText() {
        return null;
    }

    public void setNoteText(Note note) {
    }

    public void setFileName(String fileName) {
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
        this.modificationTime = LocalDateTime.now();
    }

    public LocalDateTime getCreationTime() {
        return creationTime;
    }

    public LocalDateTime getModificationTime() {
        return modificationTime;
    }

    @Override
    public String toString() {
        return "Note{" +
                "title='" + title + '\'' +
                ", content='" + content + '\'' +
                ", creationTime=" + creationTime +
                ", modificationTime=" + modificationTime +
                '}';
    }
}

class NoteSaver {

    private String directoryPath;

    public NoteSaver(String directoryPath) {
        this.directoryPath = directoryPath;
    }

    public void saveNoteToFile(Note note) {
    }

    public void saveNote(String fileName, String note) {
        // Create File object for directory path and write note to file
        File directory = new File(directoryPath);
        if (!directory.exists()) {
            directory.mkdir();
            System.out.println("Directory created: " + directory.getAbsolutePath());
        }

        try {
            if (!fileName.endsWith(".txt")) {
                fileName += ".txt";
            }
            FileWriter writer = new FileWriter(directoryPath + "\\" + fileName);
            writer.write(note);
            writer.close();
            System.out.println("Your note has been saved to " + directoryPath + "\\" + fileName);
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    static class NoteLoader {
        private String directoryPath;

        public NoteLoader(String directoryPath) {
            this.directoryPath = directoryPath;
        }

        public ArrayList<Note> loadNotes() {
            ArrayList<Note> notesList = new ArrayList<Note>();

            File directory = new File(directoryPath);

            if (directory.exists() && directory.isDirectory()) {
                File[] files = directory.listFiles();
                for (File file : files) {
                    if (file.isFile() && file.getName().endsWith(".txt")) {
                        Note note = loadNoteFromFile(file);
                        notesList.add(note);
                    }
                }
            }

            return notesList;
        }

        static Note loadNoteFromFile(File file) {
            StringBuilder content = new StringBuilder();
            String title = null;
            LocalDateTime creationTime = null;
            LocalDateTime modificationTime = null;

            try {
                FileReader reader = new FileReader(file);
                BufferedReader bufferedReader = new BufferedReader(reader);

                // Read first line as title
                title = bufferedReader.readLine();

                // Read second line as creation time
                String creationTimeStr = bufferedReader.readLine();
                creationTime = LocalDateTime.parse(creationTimeStr);

                // Read remaining lines as content
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    content.append(line);
                    content.append(System.lineSeparator());
                }

                reader.close();
            } catch (IOException e) {
                System.out.println("Error: " + e.getMessage());
            }

            Note note = new Note(title, content.toString());
            note.setTitle(title);
            note.setContent(content.toString());
            note.getCreationTime();
            note.getModificationTime();

            return note;
        }
    }
}

class NoteList {

    private ArrayList<Note> notes;

    public NoteList(String directoryPath) {
        notes = new ArrayList<>();
        File directory = new File(directoryPath);

        if (directory.exists() && directory.isDirectory()) {
            File[] files = directory.listFiles();
            for (File file : files) {
                if (file.isFile() && file.getName().endsWith(".txt")) {
                    Note note = new Note(directoryPath, directoryPath);
                    note.setTitle(file.getName());
                    note.setNoteText(NoteSaver.NoteLoader.loadNoteFromFile(file));
                    notes.add(note);
                }
            }
        }
    }

    public ArrayList<Note> getNotes() {
        return notes;
    }

    public void addNoteToList(Note note) {
        notes.add(note);
    }

    public void removeNoteFromList(Note note) {
        notes.remove(note);
    }

    public void saveAllNotes(NoteSaver noteSaver) {
        for (Note note : notes) {
            noteSaver.saveNote(note.getTitle(), note.getNoteText());
        }
    }
}
